#include "Fixed.nsh"

module Fixed {
  wire product[UPPER+UPPER+LOWER+LOWER];
  wire muling[32], muled[32], mulres[32];
  func_self mul_self(muled, muling) : mulres;
  func add {
    return a + b;
  }

  func mul_self {
    product = muled * muling;
    return (product >> LOWER)[31:0];
  }

  func mul {
    return mul_self(a, b);
  }
  func div {
    wire denominator[32];
    wire res[32];
    any{
      b == 2: {res = a >> 1;}
      b == 3: {
        denominator = 32'x00000055;
        res = mul_self(a, denominator);
      } 
      b == 6: { // 2/12
        denominator = 32'x0000002A;
        res = mul_self(a, denominator);
      }
      else: {res = 0;}
    }
    return res;
  }
}
